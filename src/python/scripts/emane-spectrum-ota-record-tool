#!/usr/bin/env python
# Copyright (c) 2022 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#  * Neither the name of Adjacent Link LLC nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# See toplevel COPYING for more information.
#

from __future__ import absolute_import, division, print_function

import sys
import struct
import sqlite3
from argparse import ArgumentParser
from collections import namedtuple
from collections import defaultdict
import os
import six

import emane_spectrum_tools.interface.record_pb2 as record_pb2
import emane.ota.commonphyheader_pb2 as commonphyheader_pb2
import emane.ota.commonmacheader_pb2 as commonmacheader_pb2
import emane.events.event_pb2 as event_pb2
import emane.events.locationevent_pb2 as locationevent_pb2

def display_progress(label,ratio):
    #https://stackoverflow.com/a/3173331
    six.print_("\r{}: [{:20s}] {:.1f}%".format(label,'#' * int(ratio * 20), ratio*100), end="", flush=True)
    if ratio == 1:
        print()

argument_parser = ArgumentParser()

argument_parser.add_argument('input-record-file',
                             type=str,
                             help='read input from specified file')

argument_parser.add_argument('output-file',
                             type=str,
                             help='write output to specified file')

argument_parser.add_argument('--no-progress',
                             action='store_true',
                             help='do not show progress [default: %(default)s]')

argument_parser.add_argument('-f',
                             '--format',
                             choices=['csv', 'sqlitedb'],
                             default='csv',
                             help='output format [default: %(default)s]')

ns = argument_parser.parse_args()

args = vars(ns)

total_input_bytes = 0

if args['input-record-file'] != '-':
    ifd = open( args['input-record-file'],'rb')
    total_input_bytes = os.stat(args['input-record-file']).st_size
else:
    if six.PY2:
        ifd = sys.stdin
        args['no_progress'] = True
    else:
      ifd = sys.stdin.buffer

if args['format'] == 'csv':
    format_nan = ''

    if args['output-file'] != '-':
        ofd = open(args['output-file'],'w')
    else:
        ofd = sys.stdout
        args['no_progress'] = True

    print('ota_source',
          'ota_destination',
          'ota_sequence',
          'phy_sub_id',
          'phy_sequence',
          'mac_registration_id',
          'mac_sequence',
          'transmitter',
          'antenna_index',
          'bandwidth_hz',
          'fixed_gain_dbi',
          'spectral_mask_index',
          'antenna_profile_id',
          'antenna_azimuth',
          'antenna_elevation',
          'frequency_hz',
          'sot',
          'eot',
          'power_dbm',
          'latitude_degrees',
          'longitude_degrees',
          'altitude_meters',
          'azimuth_degrees',
          'elevation_degrees',
          'magnitude_meters_per_second',
          'roll_degrees',
          'pitch_degrees',
          'yaw_degrees',
          sep=',',
          file=ofd)

elif  args['format'] == 'sqlitedb':
    format_nan = None

    if args['output-file'] == '-':
        print('outfile-file not valid for format:',args['out-file'],file=sys.stderr)
        exit(1)

    connection = sqlite3.connect(args['output-file'])

    connection.execute("PRAGMA synchronous = 0;");
    connection.execute("DROP TABLE IF EXISTS ota;")
    connection.execute('CREATE TABLE ota'
                       ' (ota_source INT,'
                       ' ota_destination INT,'
                       ' ota_sequence INT,'
                       ' phy_sub_id INT,'
                       ' phy_sequence INT,'
                       ' mac_registration_id INT,'
                       ' mac_sequence INT,'
                       ' transmitter INT,'
                       ' antenna_index INT,'
                       ' bandwidth_hz INT,'
                       ' fixed_gain_dbi DOUBLE,'
                       ' spectral_mask_index INT,'
                       ' antenna_profile_id INT,'
                       ' antenna_azimuth DOUBLE,'
                       ' antenna_elevation DOUBLE,'
                       ' frequency_hz INT,'
                       ' sot INT,'
                       ' eot INT,'
                       ' power_dbm DOUBLE,'
                       ' latitude_degrees DOUBLE,'
                       ' longitude_degrees DOUBLE,'
                       ' altitude_meters DOUBLE,'
                       ' azimuth_degrees DOUBLE,'
                       ' elevation_degrees DOUBLE,'
                       ' magnitude_meters_per_second DOUBLE,'
                       ' roll_degrees DOUBLE,'
                       ' pitch_degrees DOUBLE,'
                       ' yaw_degrees DOUBLE,'
                       ' PRIMARY KEY (ota_source,ota_sequence,antenna_index,frequency_hz,sot));')

else:
    print("unknown format:",args['format'],file=sys.stderr)
    exit(1)

class LocationInfo(namedtuple('LocationInfo',
                              ['latitude_degrees',
                               'longitude_degrees',
                               'altitude_meters',
                               'azimuth_degrees',
                               'elevation_degrees',
                               'magnitude_meters_per_second',
                               'roll_degrees',
                               'pitch_degrees',
                               'yaw_degrees'])):
    pass;

try:
    positions = defaultdict(lambda : LocationInfo(*[format_nan]*9))

    total_read_bytes = 0

    run = True

    while run:
        data=b''

        if not args['no_progress']:
            display_progress("output creation",total_read_bytes/total_input_bytes)

        while len(data) != 4:
            val = ifd.read(4-len(data))
            if len(val):
                data += val;
            else:
                run = False
                break

        if not run:
            break

        total_read_bytes += 4

        msg_length, = struct.unpack('!L',data);

        data = b''

        while(len(data) != msg_length):
            val = ifd.read(msg_length-len(data));
            if len(val):
                data += val;
            else:
                run = False
                break

        if not run:
            break

        total_read_bytes +=  msg_length

        record = record_pb2.Record()

        record.ParseFromString(data)

        if record.type == record_pb2.Record.TYPE_EVENT:
            event = event_pb2.Event()
            event.ParseFromString(record.event.event_data)

            for serialization in event.data.serializations:
                if serialization.eventId == 100:
                    location_event = locationevent_pb2.LocationEvent()
                    location_event.ParseFromString(serialization.data)

                    for location in location_event.locations:
                        positions[location.nemId] = \
                            LocationInfo(str(location.position.latitudeDegrees),
                                         str(location.position.longitudeDegrees),
                                         str(location.position.altitudeMeters),
                                         str(location.velocity.azimuthDegrees) if location.HasField('velocity') else format_nan,
                                         str(location.velocity.elevationDegrees) if location.HasField('velocity') else format_nan,
                                         str(location.velocity.magnitudeMetersPerSecond) if location.HasField('velocity') else format_nan,
                                         str(location.orientation.rollDegrees) if location.HasField('orientation') else format_nan,
                                         str(location.orientation.pitchDegrees) if location.HasField('orientation') else format_nan,
                                         str(location.orientation.yawDegrees) if location.HasField('orientation') else format_nan)

        elif record.type == record_pb2.Record.TYPE_OTA:
            phy_header = commonphyheader_pb2.CommonPHYHeader()
            phy_header.ParseFromString(record.ota.common_phy_header)

            # only process emulator physcial layer instance data
            if phy_header.registrationId == 7:
                mac_header = commonmacheader_pb2.CommonMACHeader()
                mac_header.ParseFromString(record.ota.common_mac_header)

                for transmitter in phy_header.transmitters:
                    for antenna in phy_header.transmitAntennas:

                        if antenna.HasField('fixedGaindBi'):
                            fixed_gain_dBi = str(antenna.fixedGaindBi)
                        else:
                            fixed_gain_dBi = format_nan

                        if antenna.HasField('spectralMaskIndex'):
                            spectral_mask_index = str(antenna.spectralMaskIndex)
                        else:
                            spectral_mask_index = format_nan

                        if antenna.HasField('pointing'):
                            antenna_profile_id = str(antenna.pointing.profileId)
                            antenna_azimuth = str(antenna.pointing.azimuthDegrees)
                            antenna.pointing.elevation = str(antenna.pointing.elevationDegrees)
                        else:
                            antenna_profile_id = format_nan
                            antenna_azimuth = format_nan
                            antenna_elevation = format_nan

                        for segment in phy_header.frequencyGroups[antenna.frequencyGroupIndex].frequencySegments:
                            sot = phy_header.txTimeMicroseconds + segment.offsetMicroseconds
                            eot = sot + segment.durationMicroseconds

                            if segment.HasField('powerdBm'):
                                power_dBm = segment.powerdBm
                            else:
                                power_dBm = transmitter.powerdBm

                            if args['format'] == 'csv':
                                print(record.ota.source,
                                      record.ota.destination,
                                      record.ota.sequence,
                                      phy_header.subId,
                                      phy_header.sequenceNumber,
                                      mac_header.registrationId,
                                      mac_header.sequenceNumber,
                                      transmitter.nemId,
                                      antenna.antennaIndex,
                                      antenna.bandwidthHz,
                                      fixed_gain_dBi,
                                      spectral_mask_index,
                                      antenna_profile_id,
                                      antenna_azimuth,
                                      antenna_elevation,
                                      segment.frequencyHz,
                                      sot,
                                      eot,
                                      power_dBm,
                                      *positions[transmitter.nemId],
                                      sep=',',
                                      file=ofd)
                            else:
                                connection.execute("INSERT INTO ota VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                                   (record.ota.source,
                                                    record.ota.destination,
                                                    record.ota.sequence,
                                                    phy_header.subId,
                                                    phy_header.sequenceNumber,
                                                    mac_header.registrationId,
                                                    mac_header.sequenceNumber,
                                                    transmitter.nemId,
                                                    antenna.antennaIndex,
                                                    antenna.bandwidthHz,
                                                    fixed_gain_dBi,
                                                    spectral_mask_index,
                                                    antenna_profile_id,
                                                    antenna_azimuth,
                                                    antenna_elevation,
                                                    segment.frequencyHz,
                                                    sot,
                                                    eot,
                                                    power_dBm) +
                                                    positions[transmitter.nemId])

                                connection.commit()

except KeyboardInterrupt:
  pass

print(file=sys.stderr)
